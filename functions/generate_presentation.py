#!/usr/bin/env python3
import requests
import json
import sys
from typing import Optional


class PresentationClient:
    def __init__(self, server_url: str = "http://localhost:3000"):
        self.server_url = server_url
        self.session_id: Optional[str] = None

    def create_session(self, topic: str, audience: str, notes: str = "",
                       style: str = "modern", ultra_mode: bool = False) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"""
        try:
            response = requests.post(f"{self.server_url}/api/create-session",
                                     json={
                                         "topic": topic,
                                         "audience": audience,
                                         "notes": notes,
                                         "style": style,
                                         "ultraMode": ultra_mode
                                     })

            if response.status_code == 200:
                data = response.json()
                self.session_id = data["sessionId"]
                print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.session_id}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {response.text}")
                return False
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def generate_content(self) -> bool:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"""
        if not self.session_id:
            print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            return False

        try:
            print("\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏...")
            response = requests.post(f"{self.server_url}/api/generate-content/{self.session_id}",
                                     stream=True)

            if response.status_code == 200:
                print("\nüìù –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏:")
                print("-" * 50)
                for chunk in response.iter_content(chunk_size=1024):
                    if chunk:
                        print(chunk.decode('utf-8'), end='', flush=True)
                print("\n" + "-" * 50)
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è: {response.text}")
                return False
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def refine_content(self, feedback: str) -> bool:
        """–£—Ç–æ—á–Ω—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        if not self.session_id:
            print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            return False

        try:
            print(f"\nüîÑ –£—Ç–æ—á–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–∞: {feedback}")
            response = requests.post(f"{self.server_url}/api/refine-content/{self.session_id}",
                                     json={"feedback": feedback},
                                     stream=True)

            if response.status_code == 200:
                print("\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏:")
                print("-" * 50)
                for chunk in response.iter_content(chunk_size=1024, decode_unicode=True):
                    if chunk:
                        print(chunk, end='', flush=True)
                print("\n" + "-" * 50)
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è: {response.text}")
                return False
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def approve_content(self) -> bool:
        """–û–¥–æ–±—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞"""
        if not self.session_id:
            print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            return False

        try:
            response = requests.post(f"{self.server_url}/api/approve-content/{self.session_id}")

            if response.status_code == 200:
                print("‚úÖ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è: {response.text}")
                return False
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def generate_code(self) -> bool:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"""
        if not self.session_id:
            print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            return False

        try:
            print("\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏...")
            response = requests.post(f"{self.server_url}/api/generate-code/{self.session_id}",
                                     stream=True)

            if response.status_code == 200:
                print("\nüíª –ö–æ–¥ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏:")
                print("-" * 50)
                for chunk in response.iter_content(chunk_size=1024, decode_unicode=True):
                    if chunk:
                        print(chunk, end='', flush=True)
                print("\n" + "-" * 50)
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {response.text}")
                return False
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def refine_code(self, feedback: str) -> bool:
        """–£—Ç–æ—á–Ω—è–µ—Ç –∫–æ–¥ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        if not self.session_id:
            print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            return False

        try:
            print(f"\nüîÑ –£—Ç–æ—á–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–∞: {feedback}")
            response = requests.post(f"{self.server_url}/api/refine-code/{self.session_id}",
                                     json={"feedback": feedback},
                                     stream=True)

            if response.status_code == 200:
                print("\nüíª –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏:")
                print("-" * 50)
                for chunk in response.iter_content(chunk_size=1024, decode_unicode=True):
                    if chunk:
                        print(chunk, end='', flush=True)
                print("\n" + "-" * 50)
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è –∫–æ–¥–∞: {response.text}")
                return False
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def get_final_result(self) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        if not self.session_id:
            print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            return None

        try:
            response = requests.get(f"{self.server_url}/api/get-result/{self.session_id}")

            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {response.text}")
                return None
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return None

    def save_presentation(self, filename: str = "presentation.html") -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –≤ HTML —Ñ–∞–π–ª"""
        result = self.get_final_result()
        if not result or not result.get("code"):
            print("‚ùå –ù–µ—Ç –∫–æ–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return False

        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(result["code"])
            print(f"‚úÖ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {filename}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False


def main():
    client = PresentationClient()

    print("üéØ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π")
    print("=" * 40)

    # –°–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
    topic = input("üìå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: ").strip()
    if not topic:
        print("‚ùå –¢–µ–º–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞")
        return

    audience = input("üë• –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏: ").strip()
    if not audience:
        print("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
        return

    notes = input("üìù –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ").strip()

    style = input("üé® –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∏–ª—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'modern'): ").strip()
    if not style:
        style = "modern"

    ultra_mode_input = input("‚ö° –í–∫–ª—é—á–∏—Ç—å —É–ª—å—Ç—Ä–∞ —Ä–µ–∂–∏–º? (y/N): ").strip().lower()
    ultra_mode = ultra_mode_input in ['y', 'yes', '–¥–∞']

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    if not client.create_session(topic, audience, notes, style, ultra_mode):
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
    if not client.generate_content():
        return

    # –¶–∏–∫–ª —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
    while True:
        action = input("\nü§î –ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º?\n"
                       "1. –û–¥–æ–±—Ä–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–¥—É\n"
                       "2. –í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
                       "3. –í—ã–π—Ç–∏\n"
                       "–í—ã–±–µ—Ä–∏—Ç–µ (1-3): ").strip()

        if action == "1":
            if client.approve_content():
                break
            else:
                return
        elif action == "2":
            feedback = input("üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∑–∞–º–µ—á–∞–Ω–∏—è: ").strip()
            if feedback:
                client.refine_content(feedback)
            else:
                print("‚ùå –ó–∞–º–µ—á–∞–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
        elif action == "3":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            return
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
    if not client.generate_code():
        return

    # –¶–∏–∫–ª —É—Ç–æ—á–Ω–µ–Ω–∏—è –∫–æ–¥–∞
    while True:
        action = input("\nü§î –ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å –∫–æ–¥–æ–º?\n"
                       "1. –ü—Ä–∏–Ω—è—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å\n"
                       "2. –í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
                       "3. –í—ã–π—Ç–∏\n"
                       "–í—ã–±–µ—Ä–∏—Ç–µ (1-3): ").strip()

        if action == "1":
            filename = input("üíæ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'presentation.html'): ").strip()
            if not filename:
                filename = "presentation.html"
            if not filename.endswith('.html'):
                filename += '.html'

            if client.save_presentation(filename):
                print("üéâ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!")
            break
        elif action == "2":
            feedback = input("üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∑–∞–º–µ—á–∞–Ω–∏—è: ").strip()
            if feedback:
                client.refine_code(feedback)
            else:
                print("‚ùå –ó–∞–º–µ—á–∞–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
        elif action == "3":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            return
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")